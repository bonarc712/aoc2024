#![allow(warnings)]

#[derive(Copy, Clone, Debug, PartialEq)]
struct Position {
    x: i32,
    y: i32
}

#[derive(Copy, Clone, Debug, PartialEq)]
struct ReindeerStep {
    position: Position,
    direction: Direction
}

#[derive(Clone, Debug)]
struct Map {
    coordinates: Vec<Vec<char>>,
    start_position: Position,
    end_position: Position
}

impl Map {

    fn get_char_at_position(&self, pos: Position) -> char {
        return self.coordinates[pos.y as usize][pos.x as usize];
    }

    fn new(coordinates: Vec<Vec<char>>) -> Self {
        let mut start_position = Position { x: -1, y: -1 };
        let mut end_position = Position { x: -1, y: -1 };

        for i in 0..coordinates.len() {
            let current_sub_vec: Vec<char> = coordinates.get(i).unwrap().clone();
            for j in 0..current_sub_vec.len() {
                let current_element = coordinates[j][i];

                if current_element == 'S' {
                    start_position = Position { x: i as i32, y: j as i32 };
                } else if current_element == 'E' {
                    end_position = Position { x: i as i32, y: j as i32 };
                }
            }
        }

        Map { coordinates, start_position, end_position }
    }
}

#[derive(Copy, Clone, Debug, PartialEq)]
enum Direction {
    North,
    East,
    South,
    West
}

#[derive(Copy, Clone, Debug, PartialEq)]
enum ReindeerAction {
    Move,
    Rotate
}

#[derive(Clone, Debug, PartialEq)]
struct Path {
    ended: bool,
    steps: Vec<ReindeerStep> // weight calculated every step
}

pub fn read_line(line: &str) -> Vec<char> {
    return line.chars().collect();
}

pub fn read_all_lines(lines: &str) -> Vec<Vec<char>> {
    let mut lines_vec = Vec::new();
    for line in lines.lines() {
        lines_vec.push(read_line(line));
    }
    return lines_vec;
}

pub fn read_map(lines: &str) -> Vec<Vec<char>> {
    return read_all_lines(lines)
}

pub fn is_clear_way(cell: char) -> bool {
    return cell == '.'
}

pub fn is_obstacle(cell: char) -> bool {
    return cell == '#'
}

pub fn is_start_position(cell: char) -> bool {
    return cell == 'S'
}

pub fn is_end_position(cell: char) -> bool {
    return cell == 'E'
}

pub fn get_start_position(map: &Vec<Vec<char>>) -> Position {
    for i in 0..map.len() {
        let current_sub_vec: Vec<char> = map.get(i).unwrap().clone();
        for j in 0..current_sub_vec.len() {
            let current_element = map[j][i];

            if current_element == 'S' {
                return Position { x: i as i32, y: j as i32 };
            }
        }
    }
    panic!("No start position found");
}

pub fn get_end_position(map: &Vec<Vec<char>>) -> Position {
    for i in 0..map.len() {
        let current_sub_vec: Vec<char> = map.get(i).unwrap().clone();
        for j in 0..current_sub_vec.len() {
            let current_element = map[j][i];

            if current_element == 'E' {
                return Position { x: i as i32, y: j as i32 };
            }
        }
    }
    panic!("No end position found");
}

pub fn get_positions_around_point(reindeer_step : &ReindeerStep) -> Vec<Position> {
    let mut positions = Vec::new();

    if reindeer_step.direction != Direction::South {
        positions.push(Position { x: reindeer_step.position.x, y: reindeer_step.position.y - 1 });
    }
    if reindeer_step.direction != Direction::West {
        positions.push(Position { x: reindeer_step.position.x + 1, y: reindeer_step.position.y });
    }
    if reindeer_step.direction != Direction::North {
        positions.push(Position { x: reindeer_step.position.x, y: reindeer_step.position.y + 1 });
    }
    if reindeer_step.direction != Direction::East {
        positions.push(Position { x: reindeer_step.position.x - 1, y: reindeer_step.position.y });
    }

    return positions;
}

pub fn determine_reindeer_action(action1 : ReindeerStep, action2 : ReindeerStep) -> ReindeerAction {
    if action1.direction == action2.direction {
        return ReindeerAction::Move;
    }
    else if action1.position == action2.position {
        return ReindeerAction::Rotate;
    }
    panic!("Illegal move");
}

pub fn get_distance_between_positions(src_position: &Position, dest_position: &Position) -> u32 {
    ((dest_position.x - src_position.x).abs() + (dest_position.y - src_position.y).abs()) as u32
}

pub fn position_is_oriented_from(src_position: &Position, dest_position: &Position) -> Direction {
    if src_position.x == dest_position.x {
        if src_position.y > dest_position.y {
            return Direction::North;
        }
        else if src_position.y < dest_position.y {
            return Direction::South;
        }
    } else if src_position.y == dest_position.y {
        if src_position.x > dest_position.x {
            return Direction::West;
        }
        else if src_position.x < dest_position.x {
            return Direction::East;
        }
    }
    panic!("Not supported");
}

pub fn calculate_score_for_one_path(steps: &Vec<ReindeerStep>) -> u32 {
    if steps.len() < 2 {
        return 1;
    }

    let mut total = 0;
    for i in 0..steps.len()-1 {
        //println!("From {:?} to {:?}", steps[i].clone(), steps[i + 1].clone());
        //println!("Action: {:?}", determine_reindeer_action(steps[i].clone(), steps[i + 1].clone()));
        match determine_reindeer_action(steps[i].clone(), steps[i + 1].clone()) {
            ReindeerAction::Move => {
                total += 1;
            }
            ReindeerAction::Rotate => {
                total += 1000;
            }
        }
    }
    return total;
}

pub fn calculate_score_for_map(map: Map) -> u32 {
    let mut step : u32 = 1;
    let mut paths : Vec<Path> = Vec::new();
    let mut minimum_amount = 4000000000;
    let mut heuristic_threshold: i32 = 8000000;
    let mut heuristic_std_dev = 100000;
    let mut current_reindeer_position : ReindeerStep = ReindeerStep { position: map.start_position, direction: Direction::East }; // initial
    let path = Path { ended: false, steps: vec![current_reindeer_position] };
    paths.push(path);

    // calculate all paths to the end
    loop { // for each step
        println!("Step: {}", step);
        println!("Amount of paths: {}", paths.len());
        let length = paths.len();
        let mut paths_copy = Vec::new();
        for path in &mut paths { // add all positions to current path
            let score = calculate_score_for_one_path(&path.steps);
            if score > minimum_amount {
                continue;
            }

            //println!("Score: {}", score);
            //println!("Distance: {}", get_distance_between_positions(&path.steps.get(&path.steps.len() - 1).unwrap().position, &map.end_position));
            let heuristical_score = (score * get_distance_between_positions(&path.steps.get(&path.steps.len() - 1).unwrap().position, &map.end_position)) as i32;
            if heuristical_score > heuristic_threshold {
                heuristic_threshold += 1;
                if (heuristical_score - heuristic_threshold).abs() > heuristic_std_dev && length > 25000 {
                    heuristic_std_dev += 1;
                    continue;
                }
                else {
                    heuristic_std_dev -= 1;
                }
            }
            else {
                heuristic_threshold -= 1;
                if (heuristical_score - heuristic_threshold).abs() > heuristic_std_dev {
                    heuristic_std_dev += 1;
                }
                else {
                    heuristic_std_dev -= 1;
                }
            }

            //if score * get_distance_between_positions(&path.steps.get(&path.steps.len() - 1).unwrap().position, &map.end_position) > heuristic_threshold {
            //    continue;
            //}

            if path.ended {
                if score < minimum_amount {
                    minimum_amount = score;
                    paths_copy.push(path.clone());
                    continue;
                }
            }
            current_reindeer_position = *path.steps.get(path.steps.len() - 1).unwrap();
            let positions = get_positions_around_point(&current_reindeer_position);
            //println!("Positions: {:?}", positions);
            for position in positions {
                //println!("Position: {:?}", position);
                if (is_obstacle(map.get_char_at_position(position))) {
                    continue;
                }
                else if is_end_position(map.get_char_at_position(position)) {
                    path.ended = true;
                }

                let mut step_found = false;
                for a_given_step in &mut path.steps {
                    if a_given_step.position == position {
                        step_found = true;
                        break;
                    }
                }

                if step_found {
                    continue;
                }

                if current_reindeer_position.direction == position_is_oriented_from(&current_reindeer_position.position, &position) {
                    let mut new_path = path.clone();
                    let new_step = ReindeerStep { position: position, direction: current_reindeer_position.direction };
                    new_path.steps.push(new_step);
                    paths_copy.push(new_path);
                }
                else {
                    let new_direction = position_is_oriented_from(&current_reindeer_position.position, &position);
                    let mut new_path = path.clone();
                    let rotate_step = ReindeerStep { position: current_reindeer_position.position.clone(), direction: new_direction };
                    let new_step = ReindeerStep { position: position, direction: new_direction };
                    new_path.steps.push(rotate_step);
                    new_path.steps.push(new_step);
                    paths_copy.push(new_path);
                }
            }
            //let index = paths.iter().position(|given_path| given_path == path).unwrap();
            //paths.remove(index);
        }
        paths = paths_copy;

        //println!("{:?}", paths);

        step += 1;

        // if all paths are ended, break
        if paths.iter().all(|path| { path.ended }) {
            break;
        }
    }

    //println!("Result");
    //println!("Paths: {:?}", paths);
    paths.iter().for_each(|path| {
        if path.ended {
            let score = calculate_score_for_one_path(&path.steps);
            if score < minimum_amount {
                minimum_amount = score;
            }
        }
    });

    return minimum_amount;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn example_1_solve_maze() {
        let input = "#####
#..E#
#.###
#S###
#####";

        let map = Map::new(read_all_lines(input));

        let result = calculate_score_for_map(map);

        assert_eq!(2004, result);
    }

    #[test]
    fn example_2_solve_maze() {
        let input = "#######
#...#E#
#.#.#.#
#.....#
#.###.#
#S..#.#
#######";

        let map = Map::new(read_all_lines(input));

        let result = calculate_score_for_map(map);

        assert_eq!(3008, result);
    }

    #[test]
    fn example_3_solve_maze() {
        let input = "#################
#...#...#...#..E#
#.#.#.#.#.#.#.#.#
#.#.#.#...#...#.#
#.#.#.#.###.#.#.#
#...#.#.#.....#.#
#.#.#.#.#.#####.#
#.#...#.#.#.....#
#.#.#####.#.###.#
#.#.#.......#...#
#.#.###.#####.###
#.#.#...#.....#.#
#.#.#.#####.###.#
#.#.#.........#.#
#.#.#.#########.#
#S#.............#
#################";

        let map = Map::new(read_all_lines(input));

        let result = calculate_score_for_map(map);

        assert_eq!(11048, result);
    }

    #[test]
    fn example_solve_maze() {
        let input = "###############
#.......#....E#
#.#.###.#.###.#
#.....#.#...#.#
#.###.#####.#.#
#.#.#.......#.#
#.#.#####.###.#
#...........#.#
###.#.#####.#.#
#...#.....#.#.#
#.#.#.###.#.#.#
#.....#...#.#.#
#.###.#.#.#.#.#
#S..#.....#...#
###############";

        let map = Map::new(read_all_lines(input));

        let result = calculate_score_for_map(map);

        assert_eq!(7036, result);
    }

    #[test]
    fn from_position_get_position_around_it_but_not_behind() {
        let base_position = Position { x: 1, y: 1 };
        let reindeer_step = ReindeerStep { position: base_position, direction: Direction::North };

        let result = get_positions_around_point(&reindeer_step);

        assert_eq!(vec![Position {x: 1, y: 0}, Position {x: 2, y:1}, Position {x: 0, y: 1}], result);
    }

    #[test]
    fn get_distance_between_positions_returns_correct_distance() {
        let position1 = Position { x: 1, y: 1 };
        let position2 = Position { x: 22, y: 21 };

        let result = get_distance_between_positions(&position1, &position2);

        assert_eq!(41, result);
    }

    #[test]
    fn read_map_has_start_and_end() {
        let input = "###############
#.......#....E#
#.#.###.#.###.#
#.....#.#...#.#
#.###.#####.#.#
#.#.#.......#.#
#.#.#####.###.#
#...........#.#
###.#.#####.#.#
#...#.....#.#.#
#.#.#.###.#.#.#
#.....#...#.#.#
#.###.#.#.#.#.#
#S..#.....#...#
###############";

        let map = Map::new(read_all_lines(input));

        assert_eq!(Position { x: 1, y: 13 }, map.start_position);
        assert_eq!(Position { x: 13, y: 1 }, map.end_position);
    }

    #[test]
    fn given_a_position_can_find_element_in_map() {
        let input = "###############
#.......#....E#
#.#.###.#.###.#
#.....#.#...#.#
#.###.#####.#.#
#.#.#.......#.#
#.#.#####.###.#
#...........#.#
###.#.#####.#.#
#...#.....#.#.#
#.#.#.###.#.#.#
#.....#...#.#.#
#.###.#.#.#.#.#
#S..#.....#...#
###############";

        let map = Map::new(read_all_lines(input));
        let position = map.clone().start_position;
        let result = map.get_char_at_position(position);

        assert_eq!('S', result);
    }

    #[test]
    fn given_a_move_should_be_recognized_as_such() {
        let position1 = Position { x: 1, y: 1};
        let position2 = Position { x: 1, y: 2};
        let dir = Direction::South;
        let reindeer_step_1 = ReindeerStep { position: position1, direction: dir };
        let reindeer_step_2 = ReindeerStep { position: position2, direction: dir };

        let result = determine_reindeer_action(reindeer_step_1, reindeer_step_2);

        assert_eq!(ReindeerAction::Move, result);
    }

    #[test]
    fn calculate_points_should_give_good_result() {
        let position1 = Position { x: 1, y: 1};
        let position2 = Position { x: 1, y: 2};
        let position3 = Position { x: 1, y: 3};
        let position4 = Position { x: 2, y: 3};
        let dir1 = Direction::South;
        let dir2 = Direction::East;
        let reindeer_step_1 = ReindeerStep { position: position1, direction: dir1 };
        let reindeer_step_2 = ReindeerStep { position: position2, direction: dir1 };
        let reindeer_step_3 = ReindeerStep { position: position3, direction: dir1 };
        let reindeer_step_4 = ReindeerStep { position: position3, direction: dir2 };
        let reindeer_step_5 = ReindeerStep { position: position4, direction: dir2 };
        let steps = vec![reindeer_step_1, reindeer_step_2, reindeer_step_3, reindeer_step_4, reindeer_step_5];

        let result = calculate_score_for_one_path(&steps);

        assert_eq!(1003, result);
    }

    #[test]
    fn given_a_rotate_should_be_recognized_as_such() {
        let position = Position { x: 1, y: 1};
        let dir1 = Direction::South;
        let dir2 = Direction::East;
        let reindeer_step_1 = ReindeerStep { position, direction: dir1 };
        let reindeer_step_2 = ReindeerStep { position, direction: dir2 };

        let result = determine_reindeer_action(reindeer_step_1, reindeer_step_2);

        assert_eq!(ReindeerAction::Rotate, result);
    }

    #[test]
    fn given_positions_should_have_good_orientation() {
        let src_position = Position { x: 1, y: 1};
        let dest_position = Position { x: 1, y: 0};

        let result = position_is_oriented_from(&src_position, &dest_position);

        assert_eq!(Direction::North, result);
    }

    #[test]
    fn given_a_map_it_can_be_read_with_obstacles_and_clear_ways() {
        let input = ".#
..";

        let result = read_map(input);

        assert_eq!(true, is_clear_way(result[1][0]));
        assert_eq!(true, is_obstacle(result[0][1]));
    }

    #[test]
    fn la_patente() {
        let input = "#############################################################################################################################################
#.....#...#.............#.....#.............#...#.....#.............................#...................#...#.............#...........#...#E#
###.#.#.#.###.#.#########.###.#.#.#####.###.#.#.#.###.#.#########.#.#.#.#.#.#######.#.#########.###.#####.#.#.#####.#####.#.#.#######.#.#.#.#
#...#.#.#...#.#.......#...#.#...#.......#...#.#.#.#.#.#.......#...#...#.#...#.....#...#.......#.#.....#...#...#...#.#...#.#.#.#.....#...#...#
#.#.#.#.###.#########.#.###.###########.#.###.#.#.#.#.#.#####.#.#######.###.#.###.#.###.###.#.#.#.#.#.#.#########.#.#.#.#.#.#.#.###########.#
#...#...#.#.#.....#...#.........#...............#...#.#.#...#.#.......#.......#...#...#.#...#.#...#...#...#.......#...#.#.#.#.#.........#...#
#.#.#####.#.#.###.#.#.###.#####.#.#.#.#.###.#.#.###.#.#.#.#.#########.#####.###.###.###.#.#.#######.#####.###.###.#####.###.#.#####.###.#.###
#.#...#.#...#.#...#.#.#...#...#.#.#.#...#...#.#.....#...#.#.........#.#.....#...#.......#.#.#.....#.....#...#.#.#.#.....#...#...#...#.#.#...#
#.#.#.#.#.###.#.###.###.###.#.#.#.#.###.#.###.###########.#########.#.#.###.#.#####.#####.###.###.#.###.###.#.#.#.#.#####.###.#.#.###.#.###.#
#...#.#...#...#...#.....#...#.#...#...#...#.......#.......#.........#.....#.#.......#...#.....#.....#.#.....#.#...#.......#.#...#...........#
###.#.#.#####.###.#.#.###.###.#######.#.###.###.#.#.#######.###############.###.#.#.#.#.###.###.###.#.#######.#############.#.###.#.#.###.###
#.#...........#.#...#.#...#.#...#...#.........#.#...#.....#.#.............#.......#...#...#.#...#.#...#...#.........#.......#...#.#.#...#...#
#.#.#.#########.###.###.###.#.#.#.#.###.#.#####.###.#####.#.#####.#.#####.#.#.#.#.#.#####.###.###.#.#.###.#.#####.#.#######.#.#.#.#.#######.#
#...#.#.#.........#.#...#.......#.#.....#...#...#...#...#.......#.#.....#.....#.........#...#.#...#...#...#.#.....#.........#.#.#.#.#.......#
#####.#.#.#####.#.#.#.###.###.###.#####.#####.###.###.#.#######.#.#####.###.###.#.#####.###.#.###.#.###.#.#.#.#####.#######.#.#.#.#.#.#######
#.....#.....#...#.#.#...#.........#...#.......#.....#.#...#.....#.....#.#...#.......#...#...#...#.......#.#.#...#.......#...#.#.#.#.#...#...#
#.#####.#####.#####.###.###########.#.#####.#########.###.###.###.#####.###.#.#.#.#.#.###.###.#.#.#########.###.###.#.#.#.###.#.#.#.###.#.###
#.#...#.#...#.#.....#...#.......#...#.#...............#.#...#.#...#.....#.....#...#.#...#...#.#...............#...#...#.#...#.#.#.#.....#...#
#.###.#.#.#.#.#.#####.#######.###.###.#.#####.#########.###.#.#####.###.#.#####.#######.###.###.#################.#####.###.#.#.#####.###.#.#
#...#.#.#.#...#...#.#.......#.......#...#.....#...........#.#.....#...#.#.....#.#.....#...#...#.#.#...............#.....#...#.#.....#.....#.#
###.#.#.#.#######.#.#.#####.#######.#####.###############.#.#####.#.#.#.#####.#.#.###.###.###.#.#.#.#.#.###########.#####.###.#####.#####.#.#
#...#...#.....#...#...#.#...#...#...#...#.#.......#.....#.#...#.....#.#...#...#.#...#...#...#.#...#.#.#.#...#.....#.....#...#.....#.....#.#.#
#.#####.#####.#.###.###.#.###.#.#.###.#.#.#.#.###.#.###.#.###.#.###.#.#####.###.###.###.###.#.###.#.#.#.#.#.#.#.###.###.###.###.#.###.#.#.#.#
#.....#.#...#...#...#...#.....#.#.....#.#...#.#.....#.....#...#...#.#...#...#.....#...#.....#.....#.#.#.#.#...#.#...#.#...#.....#...#...#...#
#####.#.#.#.#####.#####.#######.#####.#####.#.#########.###.#####.#.###.#.#####.#.###.#########.#.#.#.#.#.#####.#.###.###.#######.#.#.###.#.#
#.....#.#.#.............#.....#.#.#...#...#.#.#.......#.....#.....#...#.#.....#.#...#...........#.#.#...#.#.....#...#.......#.......#.#.#...#
#.#####.###############.#.#.###.#.#.###.#.#.#.#.#####.###.###.#.#######.#####.#.#########.#.#.###.#.#####.#####.###.#.#####.#.#######.#.#.###
#...#...............#.#.#.#...#.#...#...#.....#...#.#.#...#.............#.#...#.........#.#...#...#.#...............#.....#.#.#...#...#.....#
#.#.###.#.#########.#.#.###.#.#.#####.#######.###.#.#.#.#########.#.###.#.#.###.#####.#.#.###.#.#.#.#.###########.###.#.#.#.#.#.###.#.###.###
#.#...#...#.....#.#.#.........#.......#.....#...#.#.....#.......#...#.#...#.#...#.....#...#...#...#.#.....#.....#...#.#.#.#.#...#...#.#.....#
#.###.#.###.###.#.#.#########.#########.###.###.#.#####.#.#####.#####.###.#.#####.#.###.#.#.#.###.#.###.###.###.###.#.#.###.###.#.###.#.#.#.#
#.#...#...........#.................#.#...#.#...#...#...#.#...#.....#.....#.......#.#...#...#...#.#.#...#...#.#.#.#.#.#...#...#.#.#...#.#...#
#.#.###.#.#######.#########.#.#####.#.###.#.#####.#.#####.#.#.#####.#######.#######.#.#####.###.###.#.###.###.#.#.#.#####.#.###.#.#.###.#.###
#.#.#...#.....#...#...#...#.#.....#...#...#.#...#.#.....#.#.#...#...#.......#.....#.#.#.....#.......#...#.....#.#.#.......#.#...#.#...#.#...#
#.#.###.#####.#####.#.#.#.#.#.#.#.#.###.###.#.#.#.#####.#.###.###.###.###.###.###.#.#.#######.###.#.#########.#.#.#.#######.#.###.#####.###.#
#.#...#.....#...#...#...#...#...#.#.#...#.....#.#...#...#...#...#.....#...#...#...#.#.#...........#.#.......#.#.#...#.......#...#.......#...#
#####.#####.###.#.#.###########.#.###.#.#######.#####.#####.###.#######.#.#.###.###.#.#.#.###.###.###.#####.#.#.#####.#########.#########.#.#
#.....#.....#.#...#.#...........#.....#.#.....#.......#...#.....#...#...#.#...#...#.#.....#.....#.........#...#.#...#...#...#...#...#...#.#.#
#.#####.#####.#####.#.###.###########.###.###.#####.#.#.#.#####.#.#.#.###.###.###.#.#.###.#.###.#####.#####.###.#.#.###.#.#.#.#####.#.#.#.#.#
#.........#.........#...#...#.....#...#.....#.#...#.#...#.....#.#.#...#...#.......#.#...#...#.#.......#...#...#...#...#...#.#.#.....#.#...#.#
#.###.#.#.#.#####.#####.###.#.#.#.#.###.#####.#.#.#.#.#####.###.#.#.#######.###.###.#.#.#####.#####.###.#.###.#######.#.###.#.#.###.#.#####.#
#...#.#...#.....#...#...#.#.#...#.....#.#.......#...#.#...#...#...#.#.......#.........#.#.#.......#.#...#...#...#...#.#...#...#.#...#.....#.#
#.#.#.#.#.#####.###.#.###.#.#####.#####.#.###.#######.#.#.#.#.#.#.###.###.#############.#.#.#####.#.#.#####.###.#.#.#.#.#.#####.#.#######.#.#
#...#.#...........#...#...#.#.....#.....#.#...#.......#.#...#.#...#...#...#...#...#...#.#.......#...#...#.#.#.....#.#...#...#...#...#...#.#.#
###.#.#.#.###.###.#####.#.#.#.#.###.#####.#.###.#######.#.###.###.#.#######.#.#.#.###.#.#.#####.#######.#.#.#.#####.###.###.#.#####.#.#.#.#.#
#...#.#.......#...#.....#.#...#...#.#...#.#...#.#.......#.#.....#.#...#...#.#...#.#...#.....#...........#...#...#.......#...#...#.....#.#.#.#
#.###.#.#.#.#####.#.#########.###.#.###.#.#####.#.#####.###.#.###.###.#.#.#.#.###.#.#######.#.###########.#####.#########.###.#.#########.###
#...#.#.....#...#...#.......#.#...#...#.#.......#.#...#.#...#.#...#.#...#.......#.#...#.....#.#.....#.....#...#...#.....#.#...#.........#...#
#####.#.#.###.#.#####.#####.#.#.#.###.#.#####.#.#.#.#.#.#.#####.###.#############.#.#.#.#######.###.###.###.#.#.#.###.###.###########.#.###.#
#...#...#.....#...#...#...#.#.#.#...#.#...#.......#.#...#.#...#.#.......#.#.......#.#...#.......#.#...#...#.#.#.#...#.......#.......#.#...#.#
#.#.###.#.#.#.###.#.###.#.#.#.#.#.###.#.#.#.#######.#####.#.#.#.#.#####.#.#.#######.#######.#####.###.#.#.#.#.#####.#.#####.#.#####.###.#.#.#
#.#.....#.....#...#.#...#.#.....#.....#.#.#.........#...#...#...#.#...#...#.#.....#.........#.......#.......#.......#.#...#...#...#...#.#.#.#
#.###.###.###.###.#.#####.#######.#.###.#######.###.#.#.#########.###.###.#.#.###############.#####.#.###########.#####.#.#######.###.#.###.#
#.#...#...#.#...#.#...#.......#...#...#.#.....#.....#.#.....#.......#...#.#.#.................#...#.#.............#.....#.#.........#...#...#
#.#####.#.#.#.#.#.###.#.#######.#####.#.#.#.#########.#.#####.#####.#.#.#.#.#.#####.#####.#####.#.#############.###.#####.#.#.#########.#.#.#
#.....#.#.....#.#.....#.........#.....#.#.#.........#.#...#.....#...#.#.#.#.#...#.......#.......#...#.........#...#.#.....#.#...............#
#.###.#.#.#.#.#.#################.#####.#.###.###.###.#.#.#.#####.###.#.#.#.###.#.#####.###.#######.#.#.#####.###.#.#.#####.#########.###.###
#.....#.#.#.#.#...#.............#.#.....#.#.....#.....#.#.#.#.#...#...#.#.#.#...#...#.#...#.#.....#...#.....#...#...#.#.....................#
#####.#.#.#.#.###.#.###########.#.#.###.#.#.#.#########.#.#.#.#.###.###.#.#.#######.#.###.#.#####.#####.#.#.###.#####.#######.###.#.#######.#
#.....#.#...#...#...#.....#...#...#.......#.#...........#.#.#.#.#.....#...#.#.....#.....#.#...#.........#.#.#.#.....#.........#...#...#.....#
#.#.###.#.###.#########.#.###.#####.#######.###########.#.#.#.#.#######.###.#.#.#####.###.###.#.#.#.#####.#.#.###.###.#.#######.#.###.#.###.#
#.#.....#.#...#.........#.#.......#.#.........#...#...#.#.#.....#.....#...#...#.#.....#...#.#.#.#.#.#.....#...#...#...#...#...#.......#.#...#
#.#.###.#.#####.###.#####.#.#######.#.###.#####.#.#.#.#.#.###.#.#.###.#########.#.#####.###.#.#.#.#.#.#########.#.#.###.#.#.###.#.#####.#####
#.#.#.......#...#...#.....#...............#.....#.#.#.#.#...........#.......#.#...#...#...#...#.#...#.#.........#.#...#.#.#.....#.....#.....#
#.#.#.#####.#.###.###.###########.#########.#####.#.#.#.###########.#####.#.#.#####.#.#.#.###.#.###.#.#.#########.###.###.#.#####.#.#.#.###.#
#...#...#...#.#.#.#.......#.....#.....#.........#...#...#...#...#.....#...#.......#.#...#...#...#.#.#.#.#...#.......#.....#...#...#.#.....#.#
#.#.#####.###.#.#.#######.#.###.###.#.#.#####.#.#######.###.#.#.#####.#.#.#######.#.#.#####.#.#.#.#.#.#.#.#.#################.#.#.#.#######.#
#.#.....#.....#.#...#.......#...#...#.#...#...#.......#.....#.#.#...#.#.#.#.....#...#.#.....#.........#...#.....#.........#.#.#.......#.....#
#.#.#.#.#.#####.###.#########.###.#.#.###.#.#####.###.#####.#.#.#.#.###.###.###.#######.#.###########.#########.#.#####.#.#.#.###.#####.#####
#.....#.#.....#.#...#...#.....#...#.....#.#.#...#...#.......#.#.#.#.#...#...#...........#.........#.........#.#.....#...#...#.#.......#.....#
###.###.#####.#.#.###.#.###.###########.#.###.#.#####.#######.#.#.#.#.###.###.###.#######.#####.#.#.#######.#.#######.#######.#.#.###.#.###.#
#.......#...#.#.#.....#...#.#...#...#.....#...#.....#.#...#...#...#.#.#...#.#.....#...#...#.#...#.#.#.....#...#.....#.......#.#.#.....#...#.#
#.#.#####.#.#.#.#########.#.#.#.#.#.#######.#######.###.#.#.#######.#.#####.#######.#.#.###.#.#.#.###.###.#####.###.#.#####.#.#.#.#.#######.#
#.#.....#.#.#...#...#...#.#...#...#.........#.#.......#.#...#...#.....#...........#.#.#...#.#.#.#.....#.#.....#.#.#.#.....#.#.#...#.....#...#
#.#.#.#.#.#.###.#.#.#.#.#.#.#######.#########.#.#####.#.#.###.#.#.###.#.###.#####.#.#.###.#.#.#.#######.#####.#.#.#.#######.#.###.#####.#.#.#
#...#.#...#...#.#.#...#.#.#.#.....#.#...#.....#.#...#...#.....#.#.#.....#.#.....#.#.#.....#...#.............#...#.#.....#...#...#...#.....#.#
###.#.#######.###.#####.#.###.###.#.#.#.#.#.###.#.#.#####.#####.#.#.#####.#####.#.#.#######.#########.#####.#####.#.###.#.#.###.#.#.#######.#
#.#.#...#...#...#.....#.#...#...#.#.#.#.#.#.....#.#.........#...#.#.......#...#.#.#...#.....#.........#...#...#.......#.#.#...........#.....#
#.#.#.#.#.#####.#####.#.###.###.#.###.#.#########.###########.###.#######.#.#.#.#.#.#.#.#######.###.#.#.#.###.#.#.#####.#.###.#.#.#.#.#####.#
#...#.#.#.....#.....#.#.....#...#.#...#.....#...#.#.....#...#.#...#.#.....#.#.#.#.....#.........#...#.#.#.#...#.#.......#...#.#...#.#.....#.#
#.#.###.#.###.#####.#.#####.#.###.#.#######.#.#.#.###.###.#.#.#.#.#.#.#####.#.#.#########.#######.###.#.#.#.###.###########.#.###.###.###.#.#
#...............#...#...#...#...#.#.#.......#.#.......#...#.#.#.....#.#.....#.#...#.......#...#.#.#.#.#.#.#.#...#...........#...#...#.#...#.#
#########.#####.#.#####.#.#####.#.#.#.#######.###.#####.#.#.#.#.#####.#.#####.###.#.#.#####.#.#.#.#.#.#.#.#.#.#.#####.#########.###.###.###.#
#.....#...#.......#.....#...#...#.#.#.#.....#.#...#.....#.....#...#...#.......#...#.#.#...#.#.#.....#...#.#...#.#.....#.#.....#.#.#...#...#.#
#.#.#.#####.#####.#.#.#######.###.#.#.#.###.#.###.#.#####.#######.#.#######.#.#.#.#.#.#.#.#.#.#.#######.#.#.###.#.#.###.#.#.###.#.###.###.###
#.#.#.......#.....#.#.#.......#.#...#.#...#.......#.#...#...#...#.#.......#...#.#.#.#...#...#.#...#...#.#.....#...#...#...#...#.....#...#...#
###.#######.#.#####.#.#.#######.#####.###.#########.#.#.#.#.###.#.#######.###.#.###.#########.###.#.#.#######.#######.#.#####.#####.###.###.#
#...#.....#.#.......#...#.....#.....#.......#.......#.#...#...#.....#...#.#...#.........#...#.#...#.#.................#...#.#...#.#...#...#.#
#.###.###.#.#.###.#########.###.###.#########.#####.#.#######.#.###.#.#.#.#.#.###########.#.#.#.###.#############.#.#####.#.#.#.#.###.###.#.#
#.#...#.#.#.#...#.#.......#.....#...#...#.....#.....#.#.....#.#.......#.#...#.#...#.......#...#.#...#.......#...#...#...#.#.#.#.....#...#...#
#.#.###.#.#####.#.#.#####.###.###.###.#.#.#######.###.#.###.#.#########.#####.#.#.#.###########.#.#.#.#####.#.#.#####.#.#.#.#.#########.#####
#.#.#...#.......#.#...#.#...#.#.#...#.#.#.#...........#.#.....#.....#.#...#.....#.#.#...#...#...#.#.#.#...#.#.#.......#.....#.........#.....#
#.#.###.###.#####.###.#.#.#.#.#.###.#.#.#.#.#########.#.#######.###.#.#.###.#######.#.###.#.#.###.###.###.#.#.#############.#######.#.#.#.###
#.#...#.........#...#...#...#.....#...#.#...#.......#.#.........#.#.#...#...#...#...#.#...#...#.#...#...#.#.#.#.......#...#.....#...#.#.#...#
#.###.###.#.###.###.#.#.#.#######.#####.#####.#####.#.#######.###.#.#####.###.#.#.###.#.#.#####.###.###.#.#.#.#.#.###.#.#.#.#####.#####.###.#
#...#.....#...#...#...#...#.....#.#.....#...#.#.#...#...#...#.#.............#.#.#...#.....#.......#.....#.#.....#...#.#.#.#.#.....#...#.....#
#.#.#.#####.#####.#####.###.###.###.###.#.#.#.#.#.#######.#.#.###.###########.#.#.#.#####.###.###.#######.#########.#.#.#.###.#####.#.#####.#
#.#.....#.......#.....#.#.....#...#.#.#.#.#...#...#.......#.#...#.#.....#.....#.#.#...#.........#.......#.........#.#.#.#.....#...#.#.....#.#
###.#.###.#.#.#######.#.#####.###.#.#.#.#.#####.#####.#####.###.#.#.###.#.#####.#####.#########.###.###.#.#######.#.###.#######.#.#.#####.#.#
#...#.#...#.#...#.....#.....#.#.#...#...#.#...#.......#.....#.........#.#.....#.....#.........#.....#.#.#.#.......#.#...#.....#.#.#.#...#...#
#.#.#.#.###.###.#.#######.#.#.#.###.#####.#.###########.#####.#####.#.#.###.#.#####.#.#######.#######.#.#.#.#.#####.#.###.###.#.#.#.#.#.#####
#...............#.#.......#...#.....#.....#.......#.....#...#.#...#...#.....#...#...#...#...#...#.....#...#.#.......#.....#...#.#...#.#.....#
#.#.#.#.#.#.###.#.#.###.#.###########.#####.###.#.#.#####.#.#.#.#.#.#######.###.#.#####.#.#####.#.#.#######.#.###.#.#######.###.#######.###.#
#.....#.#.#.....#.#...#.#.......#...#.....#.#...#.#.......#.#.#.#...#.....#...#.#.#.#...#.#...#.#.#.......#.#.....#.#.....#.#...#...#...#...#
#.#.#.#.#.#.###.#.#####.#######.#.#.#####.###.#############.#.#.#####.###.###.#.#.#.#.###.#.#.#.###.#####.#.###.###.#.#####.#.###.#.#.###.#.#
#.#.#...#.#...#.#.......#...#...#.#.#.....#...#.........#...#.#.#.#...#.#.....#.#.#.#...#.#.#.#...#.#.#...#...#...#...#.....#.#...#...#.#...#
#.#.#.###.###.#.#########.#.#.###.#.#.#####.#.#.#######.#.#####.#.#.###.#######.#.#.###.#.#.#.###.#.#.#.#####.#.#.#####.#####.#.#######.###.#
#.......#...#.#.#...#.....#.#.....#...#...............#.#.#.....#...#...........#.#.....#...#...#.#...#.....#.#.#.....#...#.....#.......#...#
###.###.###.#.#.#.#.###.###.###############.#.#.#.###.#.#.###.###.###.###.#######.#####.###.#.###.#.#####.#.#.#######.###.#.###.#.#####.#.#.#
#.....#.....#.#...#.....#.#.#.............#.....#.#...#.#...#.#.#...#...#.#.....#.....#...#.#.#...#.#...#.#.#.#.........#...#...#.....#.....#
#.###.#####.#.###########.#.#.###########.#####.#.#####.###.#.#.###.#####.#.###.###.#.###.###.#.#####.#.#.###.#.#######.#####.###.#########.#
#...#.#.#...#...#.........#.#.#.........#.....#...#...#.#...#.#.#...#...#.#.#.......#.#.#...#.#.......#.......#...#.....#...................#
###.#.#.#.#####.#########.#.#.#.#####.#######.#.###.#.#.#.###.#.#.###.#.#.#.#.###.###.#.###.#.#########.###.#.###.#.#####.#####.#.#######.#.#
#...#...#...#...#.........#.#.#...#...#.....#.#.#...#.#.#.....#.....#.#.#.#...#...#...#...#.#.....#...#...#.#.....#.#.....#.....#.....#.....#
#.###.#####.#.###.###.#####.#.#.#.#.#.#.#.#.#.###.###.#.#######.###.#.#.#.#.###.###.###.#.#.#####.#.#.###.#.#######.###.###.#####.#.#.#.#.#.#
#.#.#.#...#.#.#.......#.....#...#...#.#.#...#...#.#...#.......#.#...#.#...#.#...#...#.....#.#.....#.#.....#.........#...#...#.......#.#.....#
#.#.#.#.#.#.#.#.###.###.#######.#.#.###.#.#####.#.###.#.#####.#.#.###.#####.###.#.###.###.#.#.###.#.#######.#.#######.#.#.###.###.###.###.#.#
#.............#...#.....#.......#.#...#.#.....#.#...#.#.#.#...#.#.....#...#...#...#.....#.#.#.#...#.#...#.....#.......#.#.#...#.....#.#.....#
#.#####.#####.###.#########.#####.###.#.#####.#.###.#.#.#.#.###.#.#.#.#.#.#.#.###.#.#####.#.#.#####.#.###.#####.#####.###.#.#.#.#.###.#.#.#.#
#...#...#.#...#.#.....#.....#...#.#.#.#.....#.....#.#...#.#.....#.#.#.#.#...#.......#...#...#.#...#.#.#...#.........#.....#.#...............#
#.#.#.###.#.###.#####.#.#####.###.#.#.#.#########.#.#####.#####.#.#.#.#############.#.#.#.###.#.#.#.#.#.#########.#.#.#.###.#.###.#.#.###.#.#
#.#.#.....#.#.#.....#...#.........#.#.#.#.......#.......#.......#.#.#.#.........#...#...#.#...#.#...#.#.........#.#.#.#...#.#...#.#...#.....#
###.#.#####.#.#.#.#######.###.#####.#.#.#.#####.#######.#.#######.###.#.#######.###.#.#.#.#.###.#####.#########.#.#.#####.#####.#.#.###.###.#
#...#.#...#.#...#.......#.#.........#.#.#...#.#.......#.#.#.#.....#...#.......#...#.....#.#.#...#.........#.....#.#.#.....#...#.......#.#...#
#.###.#.#.#.#.#####.#.#.#.###.#######.#.###.#.#.#.###.#.#.#.#.#####.###.#########.#####.#.#.#.###.#######.#.#######.#.#####.#.###.#.#.#.#.###
#.#...#.#...#.#.....#.#.#...#...#.....#...#.#.#...#.#.#.....#...#.......#.......#.#...#.#...#...#.......#.#.......#...#.....#.......#.#.#.#.#
#.#.###.#######.###.#.#.###.#.#.#.#.#####.#.#.#####.#.#.#.#####.#.#.#####.#####.#.#.#.#.#######.#.#.#####.#######.#.###.###.#####.#.#.#.#.#.#
#...#.#.#.......#.#.....#...#.#...................#.#.#...#...#.#.#...#.#.#.#...#...#.#...#.....#.#...#...#.....#.#...#...#...#...#...#.#...#
#.###.#.###.#.###.#.#.###.#####.#.###.#.#.#.#.###.#.#.#.###.#.#.#.#.#.#.#.#.#.#######.###.#.#######.#.#.###.###.#.###.#.#####.#.#.#.#.#.###.#
#.#...#...#.#.#.....#...........#.#...#.#.#...#.....#.#.#...#...#.#.#.#.#.#...#.......#.#.#...#.....#...#...#...#.#.#.#.#.....#.#.....#.#...#
#.#.#.###.###.#######.#########.#.#.###.#.###.#.#####.###.#######.#.#.#.#.#.###.#######.#.###.#.###.#.###.###.#.#.#.#.###.#########.###.#####
#.#.#.#.#...#.........#...#...#.#.#...#.......#.#.....#...#...#.....#...#.#...#.#.......#.#...#.#...#...#.#...#.#.#.#...#.#.....#.....#.....#
#.#.#.#.###.#.#########.#.#.#.###.###.#########.#.###.#.###.#.#.###.###.#.###.#.#.#####.#.#.###.###.#.#.#.#.###.#.#.###.#.#.###.#.#.#.###.#.#
#...#...#...#.#.........#.#.#.#.....#.#.#.....#.#.#...#.#...#.#...#...#.#.#.#.#.#.....#.#.#...#...#.#.#.#.#.#...#.#.#...#.#...#...#.#...#.#.#
#####.#.#.###.#.###.#######.#.#.#####.#.#.###.#.#.#####.#.###.#####.#.#.#.#.#.#.#.###.#.#.###.###.###.#.#.#.#####.#.#.###.###.#####.###.###.#
#.....#...........#.#.......#.#.........#.#.#...#.#...#...#...#.....#.#.#.#.#...#...#.#.#...#...#.....#...#.....#.#.........#.#.....#...#...#
#.#.#.#.#.#.#.###.###.#######.###.#######.#.#####.#.#.#####.###.###.#.#.#.#.#####.#.#.#.###.###.#.###.#########.#.#######.###.#.###.#.###.#.#
#.....#.#.#.......#...#.............................#.....#.#...#.....#.#.#.#.....#.#.#...#.#...#...#.....#.#...#.........#...#...#.......#.#
#.#####.#.#########.###.#######.#.#.###.#.###.#.#####.#####.#.###.#.#####.#.#.#.###.#.#####.#.#####.###.#.#.#.###########.#.#####.#.#######.#
#S......#.............#...............#.......#.....#.........#...........#...#.....#.........#.........#...#...............#.....#.........#
#############################################################################################################################################";

        let map = Map::new(read_all_lines(input));

        let result = calculate_score_for_map(map);

        assert_eq!(11048, result);
    }
}
